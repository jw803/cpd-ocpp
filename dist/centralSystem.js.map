{"version":3,"sources":["../src/centralSystem.js"],"names":["debug","CentralSystem","options","clients","logger","port","host","validateConnection","wsOptions","handleProtocols","protocols","req","indexOf","verifyClient","info","cb","url","isAccept","headers","server","Server","on","ws","console","onNewConnection","socket","err","readyState","addSocket","protocol","close","connection","client","poleId","replace","redisClient","hget","RedisKey","Pole_Station_Table_Hash","stationId","onRequest","command","log","index","splice","hmset","Station_Info_Hash","Poles_Info_Hash","push"],"mappings":"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","file":"centralSystem.js","sourcesContent":["import WebSocket from 'ws';\r\nimport debugFn from 'debug';\r\nimport Logger, { LOGGER_URL } from './logger';\r\nimport { Connection } from './connection';\r\nimport {\r\n  DEBUG_LIBNAME,\r\n  OCPP_PROTOCOL_1_6\r\n} from './constants';\r\nimport CentralSystemClient from './centralSystemClient';\r\n\r\nconst debug = debugFn(DEBUG_LIBNAME);\r\n\r\nexport default class CentralSystem {\r\n  constructor (options) {\r\n    this.options = options || {};\r\n    this.clients = [];\r\n    this.logger = new Logger();\r\n  }\r\n\r\n  listen (port = 9220, host = null) {\r\n    this.port = port;\r\n\r\n    const validateConnection = this.options.validateConnection || (() => true);\r\n\r\n    const wsOptions = {\r\n      port,\r\n      host,\r\n      handleProtocols: (protocols, req) => {\r\n        if (protocols.indexOf(OCPP_PROTOCOL_1_6) === -1) {\r\n          return '';\r\n        }\r\n        return OCPP_PROTOCOL_1_6;\r\n      },\r\n      verifyClient: async (info, cb) => {\r\n        if (info.req.url === LOGGER_URL) {\r\n          debug('Logger connected');\r\n          return cb(true);\r\n        }\r\n        const isAccept = await validateConnection(info.req.url);\r\n\r\n        this.logger.debug(`Request for connect \"${info.req.url}\" (${info.req.headers['sec-websocket-protocol']}) - ${isAccept ? 'Valid identifier' : 'Invalid identifier'}`);\r\n\r\n        cb(isAccept, 404, 'Central System does not recognize the charge point identifier in the URL path');\r\n      },\r\n      ...(this.options.wsOptions || {})\r\n    };\r\n\r\n    this.server = new WebSocket.Server(wsOptions);\r\n\r\n    this.server.on('error', (ws, req) => {\r\n      console.info(ws, req);\r\n    });\r\n\r\n    this.server.on('upgrade', (ws, req) => {\r\n      console.info(req);\r\n    });\r\n    this.server.on('connection', (ws, req) => this.onNewConnection(ws, req));\r\n\r\n    debug(`Listen on ${host || 'default host'}:${port}`);\r\n  }\r\n\r\n  async onNewConnection (socket, req) {\r\n    socket.on('error', (err) => {\r\n      console.info(err, socket.readyState);\r\n    });\r\n\r\n    if (req.url === LOGGER_URL) {\r\n      this.logger.addSocket(socket);\r\n      return;\r\n    }\r\n\r\n    if (!socket.protocol) {\r\n      // From Spec: If the Central System does not agree to using one of the subprotocols offered by the client,\r\n      // it MUST complete the WebSocket handshake with a response without a Sec-WebSocket-Protocol header and then\r\n      // immediately close the WebSocket connection.\r\n      this.logger.debug(`Close connection due to unsupported protocol`);\r\n      return socket.close();\r\n    }\r\n\r\n    const connection = new Connection(socket, req, this.logger);\r\n\r\n    const client = new CentralSystemClient(connection);\r\n    client.poleId = client.connection.url.replace('/', '');\r\n    client.stationId = await this.options.redisClient.hget(this.options.RedisKey.Pole_Station_Table_Hash(), client.poleId);\r\n    connection.onRequest = (command) => this.onRequest(client, command);\r\n\r\n    socket.on('close', (err) => {\r\n      if (err) {\r\n        console.log(err);\r\n      }\r\n      const index = this.clients.indexOf(client);\r\n      this.clients.splice(index, 1);\r\n      this.options.redisClient.hmset(this.options.RedisKey.Station_Info_Hash(client.stationId), [`poleStatus_${client.poleId}`]);\r\n      this.options.redisClient.hmset(this.options.RedisKey.Poles_Info_Hash(), [`poleStatus_${client.poleId}`]);\r\n    });\r\n    this.clients.push(client);\r\n  }\r\n\r\n  async onRequest (client, command) {\r\n    // implementation\r\n  }\r\n}\r\n"]}